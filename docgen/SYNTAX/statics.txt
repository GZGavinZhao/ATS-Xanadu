########################
Syntax for the statics of ATS3
########################

Sorts

Sorts in ATS are for classifying static terms.
Note that types (for dynamic terms) are static terms
but not all the static terms are types. For instance,
there are static integers and static booleans in ATS,
which are predicative.

Following is a list of built-in predicative sorts in ATS:

int // for static integers
bool // for static booleans
char // for static chars
float // for static floats
string // for static strings

Following is a list of built-in imppredicative sorts in ATS:

prop // for props (which are types for proofs)
view // for views (which are types for linear proofs)
type // for types
tbox // for boxed types
tflt/tflat // for flat/unboxed types
vtype // for linear types
vtbox // for linear boxed types
vtflt/vtflat // for linear flat/unboxed types

Abstract sorts can be introduced in ATS. For instance,

abssort real // introducing an abstract sort for reals

However, introducing abstract sorts is not a feature meant
for common use; it is reserved for experts or developers of ATS.

########################

Datasorts

A datasort is a user-defined sort. Declaring a datasort is like
declaring a datatype in an ML-like language. In the following example,
a datasort ilist is declared via a datasort-declaration:

datasort ilist =
  | ilist_nil of ()
  | ilist_cons of (int, ilist)
// end of [datasort]

There are two data constructors associated ilist: ilist_nil and
ilist_cons, which are assigned the following functional sorts:

ilist_nil: () -> ilist
ilist_cons : (int, ilist) -> ilist

########################

Sort definitions

In ATS3, a sortdef-declaration can be introduced to create an alias
for a sort or a subset sort. For instance, three sortdef-declarations
are given as follows:

sortdef ints = ilist // alias for sort
sortdef posint = {a: int | a > 0} // alias for subset sort
sortdef negint = {a: int | a < 0} // alias for subset sort

Note that a subset sort is NOT a proper sort. Primarily, a subset sort
is introduced as a form of convenience for handling quantification
(which is to be explained with examples later).

########################

Static Expressions

########################

############ end of [statics.txt] ############
