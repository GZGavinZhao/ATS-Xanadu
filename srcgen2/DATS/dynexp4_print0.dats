(***********************************************************************)
(*                                                                     *)
(*                         Applied Type System                         *)
(*                                                                     *)
(***********************************************************************)

(*
** ATS/Xanadu - Unleashing the Potential of Types!
** Copyright (C) 2023 Hongwei Xi, ATS Trustful Software, Inc.
** All rights reserved
**
** ATS is free software;  you can  redistribute it and/or modify it under
** the terms of  the GNU GENERAL PUBLIC LICENSE (GPL) as published by the
** Free Software Foundation; either version 3, or (at  your  option)  any
** later version.
** 
** ATS is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without  even  the  implied  warranty  of MERCHANTABILITY or
** FITNESS FOR A PARTICULAR PURPOSE.  See the  GNU General Public License
** for more details.
** 
** You  should  have  received  a  copy of the GNU General Public License
** along  with  ATS;  see the  file COPYING.  If not, please write to the
** Free Software Foundation,  51 Franklin Street, Fifth Floor, Boston, MA
** 02110-1301, USA.
*)

(* ****** ****** *)
//
(*
Author: Hongwei Xi
(*
Tue Dec 26 22:51:15 EST 2023
*)
Authoremail: gmhwxiATgmailDOTcom
*)
//
(* ****** ****** *)
#include
"./../HATS/xatsopt_sats.hats"
#include
"./../HATS/xatsopt_dats.hats"
(* ****** ****** *)
#define
ATS_PACKNAME
"ATS3.XANADU.xatsopt-20220500"
(* ****** ****** *)
(* ****** ****** *)
#staload
_(*?*) = "./lexing0_print0.dats"
(* ****** ****** *)
#staload "./../SATS/lexing0.sats"
(* ****** ****** *)
#staload "./../SATS/dynexp4.sats"
(* ****** ****** *)
(* ****** ****** *)
#symload lctn with d4ecl_get_lctn
#symload node with d4ecl_get_node
(* ****** ****** *)
(* ****** ****** *)

#implfun
d4exp_fprint
(out, dcl0) =
let
#impltmp
g_print$out<>() = out
in//let
//
case+
dcl0.node() of
//
|D4Eint(tok) =>
print("D4Eint(",tok,")")
|D4Ebtf(sym) =>
print("D4Ebtf(",sym,")")
|D4Echr(tok) =>
print("D4Echr(",tok,")")
|D4Eflt(tok) =>
print("D4Eflt(",tok,")")
|D4Estr(tok) =>
print("D4Estr(",tok,")")
//
|D4Enone0() => print( "D4Enone0(", ")" )
|D4Enone1(d3e1) => print("D4Enone1(", d3e1, ")")
|D4Enone2(d4e1) => print("D4Enone2(", d4e1, ")")
//
|
D4Eerrck // HX: generated by [tread34]
(lvl1(*err-level*),dexp) => print("D4Cerrck(",lvl1,";",dexp,")")
//
end (*let*) // end of [d4exp_fprint(out, dcl0)]

(* ****** ****** *)

#implfun
d4ecl_fprint
(out, dcl0) =
let
#impltmp
g_print$out<>() = out
in//let
//
case+
dcl0.node() of
//
|D4Cd3ecl(d3cl) =>
print("D4Cd3ecl(",d3cl,")")
//
(* ****** ****** *)
//
|
D4Cinclude
( knd0, tknd
, gsrc, fopt, dopt ) =>
(
print("D4Cinclude(");
print
(
knd0,";",
tknd,";",gsrc,";",fopt,";","...",")"))
//
(* ****** ****** *)
//
|D4Cnone0() => print( "D4Cnone0(", ")" )
|D4Cnone1(d3cl) => print( "D4Cnone1(",d3cl,")" )
|D4Cnone2(d4cl) => print( "D4Cnone2(",d4cl,")" )
//
(* ****** ****** *)
//
|
D4Cerrck // HX: generated by [tread01]
(lvl1(*err-level*),d4cl) => print("D4Cerrck(",lvl1,";",d4cl,")")
//
end (*let*) // end of [d4ecl_fprint(out, dcl0)]

(* ****** ****** *)
(* ****** ****** *)

(* end of [ATS3/XATSOPT_srcgen2_dynexp4_print0.dats] *)
